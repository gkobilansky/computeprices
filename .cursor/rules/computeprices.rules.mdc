---
description: 
globs: 
alwaysApply: true
---
# Compute Prices - Cursor AI Rules

## General Guidelines

- Maintain consistent code style across the project
- Follow React and Next.js best practices
- Ensure proper TypeScript typing where applicable
- Use ES6+ syntax consistently
- Prioritize readability and maintainability
- Document complex logic with clear comments
- Implement appropriate error handling for all async operations
- Follow accessibility best practices (ARIA attributes, keyboard navigation)
- Write secure code, especially for authentication and data handling
- Use consistent naming conventions throughout the project

## Project Structure

- Place page components in `/app` directory following Next.js app router structure
- Store reusable React components in `/components`
- Add new API endpoints under `/app/api`
- Keep utility functions in `/lib` with appropriate subdirectories
- Place static data in `/data` directory
- Add TypeScript type definitions in `/types` directory
- Store vector graphics and logos in `/public/logos` directory
- Place test files adjacent to the components they test with `.test.tsx` suffix
- Store global state management in `/lib/context` or `/lib/store`
- Place authentication logic in `/lib/auth`
- Keep database connection and query logic in `/lib/db`
- Organize backend services in `/services` directory
- Add web scraping scripts to `/scripts` directory with provider-specific naming

## Frontend Development

### Components

- Use functional components with hooks
- Follow PascalCase naming for components
- Maintain responsive design considerations in all UI components
- Use Tailwind CSS for styling with DaisyUI components where appropriate
- Follow the existing pattern for component composition as in `@components/GPUComparisonTable.jsx`
- Implement appropriate prop validation with TypeScript interfaces
- Use React fragments to avoid unnecessary DOM nesting

```jsx
// Example component structure
export default function ComponentName({ prop1, prop2 }) {
  const [state, setState] = useState(initialValue);
  
  // Side effects
  useEffect(() => {
    // Effect logic
  }, [dependencies]);
  
  // Event handlers
  const handleEvent = () => {
    // Event handling logic
  };
  
  return (
    <div className="tailwind-classes">
      {/* Component JSX */}
    </div>
  );
}
```

### Component Composition

- Use compound components for complex UI elements with multiple related parts
- Implement higher-order components for cross-cutting concerns
- Create component factories when generating multiple similar components
- Leverage React Context API for deep prop passing situations
- Prefer composition over inheritance for component reuse

```jsx
// Example compound component
function Dropdown({ children }) {
  return <div className="dropdown">{children}</div>;
}

Dropdown.Item = function DropdownItem({ children }) {
  return <div className="dropdown-item">{children}</div>;
};

// Usage
<Dropdown>
  <Dropdown.Item>Option 1</Dropdown.Item>
  <Dropdown.Item>Option 2</Dropdown.Item>
</Dropdown>
```

### State Management

- Use React Context for global state as demonstrated in `@lib/context/FilterContext.js`
- Create custom hooks for reusable state logic
- Follow the pattern in `@lib/hooks/useGPUData.js` for data fetching hooks
- Prefer local state for component-specific state
- Implement the provider pattern as seen in `FilterProvider` for shared state
- Use appropriate state management for different scenarios:
  - `useState` for simple component state
  - `useReducer` for complex state logic
  - React Context for global application state
  - Custom hooks for reusable state logic
- Implement Redux with middleware for complex global state management
- Use selectors for derived state calculations
- Handle asynchronous state updates consistently with async actions

### Error Handling

- Implement error boundaries to catch and handle rendering errors
- Use try/catch blocks for error handling in async operations
- Provide meaningful error messages to users
- Log errors to console in development and to appropriate services in production
- Create custom error classes for specific error categories
- Handle edge cases and validate inputs
- Implement centralized error tracking and reporting

```jsx
// Example error handling in async operations
const fetchData = async () => {
  try {
    const response = await fetch('/api/data');
    if (!response.ok) {
      throw new Error('Failed to fetch data');
    }
    return response.json();
  } catch (error) {
    console.error('Error fetching data:', error);
    setError(error.message);
    return null;
  }
};
```

### Styling

- Use Tailwind utility classes for styling
- Maintain consistency with existing color schemes and spacing
- Follow the gradient utility classes defined in `@app/globals.css` for special styling
- Use responsive classes (sm:, md:, lg:) for adaptive layouts
- Maintain dark/light theme compatibility where implemented
- Use CSS modules for component-specific styles when needed
- Follow mobile-first responsive design approach

### Forms and Validation

- Use controlled components for form inputs
- Implement client-side validation with appropriate error messages
- Group related form fields logically
- Provide visual feedback for form submission states
- Use form libraries like Formik or React Hook Form for complex forms
- Implement appropriate accessibility attributes for form elements
- Use consistent validation patterns across the application

```jsx
// Example form with validation
function ContactForm() {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  
  const validateEmail = (email) => {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validateEmail(email)) {
      setError('Please enter a valid email');
      return;
    }
    // Submit form
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <input 
        type="email" 
        value={email} 
        onChange={(e) => setEmail(e.target.value)}
        className={error ? 'border-red-500' : ''}
        aria-invalid={error ? 'true' : 'false'}
        aria-describedby={error ? 'email-error' : undefined}
      />
      {error && <p id="email-error" className="text-red-500">{error}</p>}
      <button type="submit">Submit</button>
    </form>
  );
}
```

### Authentication

- Use secure authentication methods with proper token handling
- Implement protected routes for authenticated content
- Store authentication tokens securely
- Provide clear user feedback for authentication errors
- Use HTTP-only cookies for storing session information where possible
- Implement proper token refresh mechanisms
- Follow the established patterns in existing code for authentication
- Use CSRF protection tokens for forms
- Implement rate limiting for login attempts

```jsx
// Example protected route component
function ProtectedRoute({ children }) {
  const { user, loading } = useAuth();
  
  if (loading) {
    return <LoadingSpinner />;
  }
  
  if (!user) {
    return <Redirect to="/login" />;
  }
  
  return children;
}
```

## Data Fetching and Management

### Supabase Integration

- Use the pattern in `@lib/supabase.js` for client-side Supabase access
- Use `@lib/supabase-admin.js` for admin-level operations
- Handle database errors consistently with clear error messages
- Follow established patterns for querying and updating data
- Implement proper pagination and filtering for large datasets
- Use optimistic updates for better user experience
- Implement database transactions for operations that require atomicity

```javascript
// Example Supabase query pattern
const { data, error } = await supabase
  .from('table_name')
  .select('column1, column2')
  .eq('filter_column', filterValue);

if (error) {
  console.error('Error fetching data:', error);
  throw error;
}

return data;
```

### Data Structure

- Follow established patterns for JSON data structures in `/data` directory
- Maintain consistent property naming in data objects as seen in `data/providers.json`
- Structure provider data with standard fields: `id`, `name`, `slug`, `description`, `pros`, `cons`, `features`, `computeServices`, `support`, `regions`, `uniqueSellingPoints`
- Use arrays for lists of features, pros, cons, and other multi-item properties
- Include pricing information where available in standardized format
- Ensure data is properly typed with TypeScript interfaces

### Data Fetching Patterns

- Implement loading states for data fetching operations
- Handle error cases gracefully with user feedback
- Use caching strategies to optimize repeated data fetches
- Implement pagination for large datasets
- Use React Query or SWR for complex data fetching requirements
- Implement retry mechanisms for failed requests
- Use proper cancellation patterns for abandoned requests
- Handle race conditions in concurrent requests

```jsx
// Example data fetching with loading and error states
function DataComponent() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/data');
        if (!response.ok) {
          throw new Error('Failed to fetch data');
        }
        const result = await response.json();
        setData(result);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, []);
  
  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorMessage message={error} />;
  if (!data) return <EmptyState />;
  
  return <DataDisplay data={data} />;
}
```

### Web Scraping

- Follow the consistent pattern in `@scripts/scrape-*.js` files for new scraping scripts
- Implement proper error handling with try/catch blocks and detailed error logging
- Use Puppeteer for browser automation with headless: 'new' option
- Support --dry-run flag for testing scraper logic without database updates
- Use the findMatchingGPUModel helper from `@lib/utils/gpu-scraping.js` to match scraped GPUs 
- Process data in phases: scrape, match with known models, log results, then update database
- Provide detailed console output with emoji indicators (🔍, ✅, ❌, etc.) for better readability
- Close browser instances in finally blocks to prevent memory leaks
- Output results using console.table for better data visualization
- Separate unmatched GPUs for manual review

```javascript
// Example scraping pattern based on @scripts/scrape-aws.js
async function scrapeProviderGPUs(dryRun = false) {
  const browser = await puppeteer.launch({ headless: 'new' });
  const page = await browser.newPage();
  
  try {
    console.log('🔍 Starting Provider GPU scraper...');
    await page.goto('https://provider.com/pricing');
    await page.waitForSelector('table'); // Wait for pricing table
    
    const providerId = 'provider-uuid-from-database';

    // Get existing GPU models first
    const { data: existingModels, error: modelsError } = await supabaseAdmin
      .from('gpu_models')
      .select('*');

    if (modelsError) {
      console.error('Error fetching existing GPU models:', modelsError);
      return;
    }

    // Scrape the data
    const gpuData = await page.evaluate(() => {
      // Extract data from DOM
      // Return structured array of GPUs with prices
    });

    console.log('\n📊 Scraped GPU Data:');
    console.table(gpuData);

    // Match with known models
    const matchResults = [];
    const unmatchedGPUs = [];
    
    for (const gpu of gpuData) {
      const matchingModel = await findMatchingGPUModel(gpu.name, existingModels);
      
      if (matchingModel) {
        matchResults.push({
          scraped_name: gpu.name,
          matched_model: matchingModel.name,
          price: gpu.price
        });
      } else {
        unmatchedGPUs.push({ name: gpu.name, price: gpu.price });
      }
    }

    // Output results
    console.log('\n✅ Successfully matched GPUs:');
    console.table(matchResults);
    
    if (unmatchedGPUs.length > 0) {
      console.log('\n⚠️ Unmatched GPUs that need attention:');
      console.table(unmatchedGPUs);
    }

    // Skip database updates in dry run mode
    if (dryRun) {
      console.log('\n🏃 DRY RUN: No database updates will be performed');
      return;
    }

    // Database updates
    console.log('\n💾 Starting database updates...');
    
    for (const result of matchResults) {
      const matchingModel = existingModels.find(m => m.name === result.matched_model);
      
      // Insert price record
      const { error: priceError } = await supabaseAdmin
        .from('prices')
        .insert({
          provider_id: providerId,
          gpu_model_id: matchingModel.id,
          price_per_hour: result.price,
          source_name: 'Provider Name',
          source_url: 'https://provider.com/pricing'
        });

      if (priceError) {
        console.error(`❌ Error inserting price record for ${result.scraped_name}:`, priceError);
      }
    }

    console.log('\n✨ Successfully completed GPU data processing');

  } catch (error) {
    console.error('❌ Scraping error:', error);
  } finally {
    await browser.close();
  }
}

// Check for --dry-run flag
const dryRun = process.argv.includes('--dry-run');
scrapeProviderGPUs(dryRun);
```

## API Development

- Place new API routes in appropriate directories under `@app/api`
- Use consistent response formats across all endpoints
- Include proper error handling in all API routes
- Follow the pattern of using NextResponse from next/server
- Add appropriate comments for API functionality
- Implement proper input validation for all API parameters
- Use appropriate HTTP status codes
- Implement rate limiting for public endpoints
- Add proper authentication checks for protected routes
- Create API documentation for endpoints
- Implement API versioning for major changes

```typescript
// Example API route pattern
export async function GET(request: Request) {
  try {
    // Extract and validate query parameters
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json({ error: 'ID is required' }, { status: 400 });
    }
    
    // Fetch data
    const data = await fetchDataById(id);
    
    if (!data) {
      return NextResponse.json({ error: 'Not found' }, { status: 404 });
    }
    
    // Return successful response
    return NextResponse.json({ data });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { error: 'Server error' }, 
      { status: 500 }
    );
  }
}
```

## Custom Hooks

- Create custom hooks for reusable logic following React Hooks naming convention
- Implement data fetching hooks similar to `@lib/hooks/useGPUData.js`
- Build utility hooks like `@lib/hooks/useTableSort.js` for reusable UI functionality
- Ensure hooks are properly typed with TypeScript
- Provide clear documentation for hook parameters and return values
- Follow the established patterns in the codebase for hook implementation
- Use custom hooks to encapsulate complex logic and reduce component complexity

```javascript
// Example hook pattern
export function useCustomHook(initialValue) {
  const [state, setState] = useState(initialValue);
  
  const updateState = useCallback((newValue) => {
    // Logic to update state
    setState(newValue);
  }, []);
  
  return {
    state,
    updateState
  };
}
```

## TypeScript Usage

- Define interfaces for data structures in `/types` directory
- Use TypeScript for new files when possible, especially for API routes
- Follow the naming pattern in `@types/index.ts` and `@types/learn.ts`
- Ensure proper typing for component props
- Use TypeScript generics where appropriate
- Implement proper type guards for runtime type checking
- Use appropriate TypeScript utility types (Partial, Pick, Omit, etc.)
- Implement proper typing for async functions and API responses

```typescript
// Example TypeScript interface
interface Provider {
  id: string;
  name: string;
  slug: string;
  description: string;
  pros: string[];
  cons: string[];
  features: Feature[];
  computeServices: ComputeService[];
  regions: Region[];
}

// Example typed component
interface ButtonProps {
  label: string;
  onClick: () => void;
  variant?: 'primary' | 'secondary';
  disabled?: boolean;
}

function Button({ label, onClick, variant = 'primary', disabled = false }: ButtonProps) {
  return (
    <button 
      onClick={onClick}
      disabled={disabled}
      className={`btn btn-${variant}`}
    >
      {label}
    </button>
  );
}
```

## Performance Optimization

- Implement code splitting using dynamic imports for larger components
- Use React.memo for components that rerender frequently with the same props
- Apply useMemo and useCallback hooks for expensive calculations and callbacks
- Optimize images with proper sizing and formats
- Implement virtualization for long lists
- Use appropriate key props for lists to optimize rendering
- Implement proper lazy loading for components and assets
- Avoid unnecessary re-renders with proper dependency arrays
- Use web workers for CPU-intensive operations
- Implement resource prioritization strategies

```jsx
// Example code splitting
import dynamic from 'next/dynamic';

// Dynamically import a heavy component
const HeavyComponent = dynamic(() => import('@components/HeavyComponent'), {
  loading: () => <LoadingSpinner />,
  ssr: false // Disable server-side rendering if needed
});

// Example memoization
const MemoizedComponent = React.memo(function Component(props) {
  return <div>{/* Component JSX */}</div>;
});

// Example useMemo
const expensiveComputation = useMemo(() => {
  return data.map(item => complexTransformation(item));
}, [data]);
```

## Best Practices

- Add appropriate SEO metadata for pages as shown in `@app/metadata.js`
- Include schema.org structured data for better SEO where relevant
- Create responsive designs that work on mobile and desktop
- Optimize images and use Next.js Image component
- Implement proper error boundaries and loading states
- Handle edge cases in data fetching and display
- Utilize helper functions like `formatPrice` from `@lib/utils.js` for consistent formatting
- Follow security best practices for user inputs and data handling
- Implement appropriate caching strategies
- Use internationalization (i18n) for multi-language support
- Ensure accessibility compliance with WCAG guidelines

## Testing

- Write unit tests for utility functions and isolated components
- Implement integration tests for complex component interactions
- Use mock data for testing components that fetch data
- Test error states and edge cases
- Follow existing testing patterns in the codebase
- Use appropriate testing libraries (Jest, React Testing Library)
- Implement proper test coverage for critical functionality
- Use appropriate assertions and matchers
- Write end-to-end tests for critical user flows
- Implement snapshot testing for UI components

```jsx
// Example test pattern
describe('Button component', () => {
  it('renders correctly with provided label', () => {
    render(<Button label="Click me" onClick={jest.fn()} />);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });
  
  it('calls onClick handler when clicked', () => {
    const onClick = jest.fn();
    render(<Button label="Click me" onClick={onClick} />);
    fireEvent.click(screen.getByText('Click me'));
    expect(onClick).toHaveBeenCalledTimes(1);
  });
  
  it('applies disabled attribute when disabled prop is true', () => {
    render(<Button label="Click me" onClick={jest.fn()} disabled />);
    expect(screen.getByText('Click me')).toBeDisabled();
  });
});
```

## Backend Development

- Implement proper database connection pooling
- Use environment variables for configuration settings
- Implement proper logging for backend operations
- Follow RESTful API design principles
- Implement proper error handling and validation for API endpoints
- Use appropriate middleware for common tasks
- Implement proper security measures (CORS, CSRF protection, etc.)
- Follow the established patterns in the codebase for backend development
- Organize server-side code in appropriate directories
- Implement transaction handling for database operations

```typescript
// Example backend service pattern
export class UserService {
  private db: Database;
  
  constructor(db: Database) {
    this.db = db;
  }
  
  async getUserById(id: string): Promise<User | null> {
    try {
      const user = await this.db.query('SELECT * FROM users WHERE id = $1', [id]);
      return user || null;
    } catch (error) {
      logger.error('Error getting user:', error);
      throw new ServiceError('Failed to retrieve user', 500);
    }
  }
  
  async createUser(userData: UserInput): Promise<User> {
    // Validate user data
    if (!userData.email || !userData.password) {
      throw new ValidationError('Email and password are required');
    }
    
    // Implementation details
  }
}
```

## Database Schema and Migrations

- Follow the patterns in `@supabase/migrations` for database schema changes
- Use UUIDs as primary keys for all tables as shown in the migrations
- Create appropriate indexes for frequently queried columns
- Implement proper foreign key relationships between tables
- Use appropriate data types for columns (e.g., enum types for predefined values)
- Add constraints to enforce data integrity
- Include comments for complex table structures or columns
- Enable Row Level Security (RLS) for tables with appropriate policies
- Create type definitions in TypeScript that match the database schema
- Implement database migrations for schema changes

```sql
-- Example migration pattern
-- Create new table
CREATE TABLE IF NOT EXISTS new_entity (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  parent_id UUID REFERENCES parent_table(id) ON DELETE CASCADE
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_new_entity_name ON new_entity(name);
CREATE INDEX IF NOT EXISTS idx_new_entity_parent_id ON new_entity(parent_id);

-- Enable RLS
ALTER TABLE new_entity ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Allow public read access to new_entity"
  ON new_entity FOR SELECT
  USING (true);

CREATE POLICY "Allow authenticated insert to new_entity"
  ON new_entity FOR INSERT
  TO authenticated
  WITH CHECK (true);
```

## Automation and Cron Jobs

- Follow the pattern in `@vercel.json` for defining cron jobs
- Set appropriate schedules for recurring tasks
- Create dedicated API routes for cron job endpoints
- Implement proper logging in cron job handlers
- Use consistent error handling for scheduled tasks
- Add appropriate retry logic for failed cron jobs
- Keep cron job logic isolated in dedicated modules
- Document the purpose and schedule of each cron job
- Test cron job endpoints with manual requests

```json
// Example cron job configuration in vercel.json
{
  "crons": [
    {
      "path": "/api/cron/provider-name",
      "schedule": "0 5 * * *"
    }
  ]
}
```

## Security

- Implement proper input validation and sanitization
- Use parameterized queries for database operations
- Implement proper authentication and authorization checks
- Avoid exposing sensitive information in logs or responses
- Follow OWASP security guidelines
- Implement proper Content Security Policy (CSP)
- Use HTTPS for all connections
- Implement proper rate limiting and protection against common attacks
- Use secure headers in API responses
- Implement proper password hashing and storage
- Handle file uploads securely

## Internationalization

- Use appropriate i18n libraries for text translation
- Support right-to-left (RTL) languages where necessary
- Format dates, numbers, and currencies according to locale
- Provide fallback content for untranslated strings
- Follow the established patterns in the codebase for internationalization
- Use locale-aware components and utilities

## Documentation

- Document complex logic with clear comments
- Provide JSDoc annotations for functions and methods
- Include usage examples for reusable components
- Document API endpoints with request/response examples
- Maintain up-to-date README files for major directories
- Follow the established documentation patterns in the codebase
- Document architectural decisions and patterns

## Configuration Files

- Follow established patterns for configuration files like `.eslintrc.js`, `next.config.js`, etc.
- Keep environment-specific configuration in `.env` files
- Document required environment variables
- Use appropriate TypeScript configuration for the project
- Configure proper linting rules
- Set up appropriate build and development scripts
- Use consistent configuration across environments