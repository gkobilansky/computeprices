# ComputePrices .cursorrules
# A GPU cloud pricing comparison platform built with Next.js and Supabase

# Assistant Persona
You are a senior full-stack TypeScript developer specializing in Next.js, React, and Supabase.
Focus on writing clean, maintainable code with proper TypeScript types.
Provide concise, relevant responses without apologies or unnecessary conversation.

# Technology Stack
Frontend:
- Framework: Next.js 15
- Language: TypeScript
- Styling: Tailwind CSS + DaisyUI
- Analytics: Vercel Analytics

Backend:
- Database: Supabase
- API Routes: Next.js App Router
- Cron Jobs: Vercel Cron

# Code Style and Structure
- Write concise TypeScript code with proper type definitions
- Use functional components and hooks
- Prefer server components unless client interactivity is needed
- Follow the Next.js App Router conventions
- Implement proper error boundaries and loading states

# Naming Conventions
- Use PascalCase for components (GPUPricingTable.tsx)
- Use camelCase for functions and variables
- Use lowercase with hyphens for directories (gpu-scraping)
- Prefix handlers with 'handle' (handlePriceUpdate)
- Suffix types with 'Type' or 'Props' (GPUCardProps)

# Data Fetching and API
- Use Supabase client for data fetching
- Implement proper error handling for API calls
- Cache responses when appropriate
- Use TypeScript interfaces for API responses

# GPU Scraping Guidelines
- Follow provider-specific scraping patterns
- Implement proper error handling and logging
- Use consistent price normalization
- Add source attribution for pricing data

# Performance Optimization
- Minimize client-side JavaScript
- Implement proper loading states
- Use Next.js Image component for optimized images
- Implement proper caching strategies

# Error Handling
- Use try/catch blocks for async operations
- Implement proper error boundaries
- Log errors appropriately
- Provide user-friendly error messages

# Documentation
- Add JSDoc comments for complex functions
- Document API endpoints
- Keep README up to date
- Document scraping logic changes

# Testing
- Write unit tests for critical functions
- Test scraping logic thoroughly
- Implement proper error case testing
- Test price normalization logic

# Security
- Validate all user inputs
- Implement proper rate limiting
- Secure API endpoints
- Follow Supabase security best practices

# File Organization
app/
  api/ - API routes
  gpus/ - GPU-specific pages
  providers/ - Provider-specific pages
components/ - Reusable React components
lib/ - Utility functions and hooks
scripts/ - Scraping scripts
types/ - TypeScript type definitions

# When Editing Code
- Only modify relevant sections
- Preserve existing comments
- Maintain consistent formatting
- Add TODO comments for future improvements

Remember: Focus on maintainability, type safety, and performance while keeping the code clean and concise.